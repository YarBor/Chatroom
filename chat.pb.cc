// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#include "chat.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ChatProto {
template <typename>
PROTOBUF_CONSTEXPR process_data_package::process_data_package(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pid_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct process_data_packageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR process_data_packageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~process_data_packageDefaultTypeInternal() {}
  union {
    process_data_package _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 process_data_packageDefaultTypeInternal _process_data_package_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR heartbeat_data_package::heartbeat_data_package(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.online_num_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct heartbeat_data_packageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR heartbeat_data_packageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~heartbeat_data_packageDefaultTypeInternal() {}
  union {
    heartbeat_data_package _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 heartbeat_data_packageDefaultTypeInternal _heartbeat_data_package_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR msg_data_package::msg_data_package(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.speaker_)*/nullptr} {}
struct msg_data_packageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR msg_data_packageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~msg_data_packageDefaultTypeInternal() {}
  union {
    msg_data_package _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 msg_data_packageDefaultTypeInternal _msg_data_package_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR data::data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.details_)*/{}
  , /*decltype(_impl_.timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.action_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct dataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR dataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~dataDefaultTypeInternal() {}
  union {
    data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 dataDefaultTypeInternal _data_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR user_data_package::user_data_package(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.email_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ ::int64_t{0}

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_.is_active_)*/ false
} {}
struct user_data_packageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR user_data_packageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~user_data_packageDefaultTypeInternal() {}
  union {
    user_data_package _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 user_data_packageDefaultTypeInternal _user_data_package_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR friend_relation::friend_relation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chatid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.master_)*/nullptr
  , /*decltype(_impl_.follower_)*/nullptr
  , /*decltype(_impl_.status_)*/ 0
} {}
struct friend_relationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR friend_relationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~friend_relationDefaultTypeInternal() {}
  union {
    friend_relation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 friend_relationDefaultTypeInternal _friend_relation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR group_relation::group_relation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.manager_)*/{}
  , /*decltype(_impl_.member_)*/{}
  , /*decltype(_impl_.chatid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.master_)*/nullptr
  , /*decltype(_impl_.follower_)*/nullptr
  , /*decltype(_impl_.owner_)*/nullptr
  , /*decltype(_impl_.status_)*/ 0
} {}
struct group_relationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR group_relationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~group_relationDefaultTypeInternal() {}
  union {
    group_relation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 group_relationDefaultTypeInternal _group_relation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR chatHistory_data_package::chatHistory_data_package(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.chatid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.recevier_id_)*/ ::uint64_t{0u}
} {}
struct chatHistory_data_packageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR chatHistory_data_packageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~chatHistory_data_packageDefaultTypeInternal() {}
  union {
    chatHistory_data_package _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 chatHistory_data_packageDefaultTypeInternal _chatHistory_data_package_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR error_package::error_package(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.stat_)*/ 0
} {}
struct error_packageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR error_packageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~error_packageDefaultTypeInternal() {}
  union {
    error_package _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 error_packageDefaultTypeInternal _error_package_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR file::file(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ip_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.md5_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.owner_)*/nullptr
  , /*decltype(_impl_.size_)*/ ::int64_t{0}

  , /*decltype(_impl_.offset_)*/ ::int64_t{0}

  , /*decltype(_impl_.act_mode_)*/ 0
} {}
struct fileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR fileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~fileDefaultTypeInternal() {}
  union {
    file _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 fileDefaultTypeInternal _file_default_instance_;
}  // namespace ChatProto
static ::_pb::Metadata file_level_metadata_chat_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_chat_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_chat_2eproto = nullptr;
const ::uint32_t TableStruct_chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ChatProto::process_data_package, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ChatProto::process_data_package, _impl_.ip_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::process_data_package, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::process_data_package, _impl_.pid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ChatProto::heartbeat_data_package, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ChatProto::heartbeat_data_package, _impl_.online_num_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::heartbeat_data_package, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::msg_data_package, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::msg_data_package, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ChatProto::msg_data_package, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::msg_data_package, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::msg_data_package, _impl_.speaker_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ChatProto::data, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ChatProto::data, _impl_.action_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::data, _impl_.details_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::data, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::user_data_package, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::user_data_package, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ChatProto::user_data_package, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::user_data_package, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::user_data_package, _impl_.password_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::user_data_package, _impl_.email_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::user_data_package, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::user_data_package, _impl_.is_active_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ChatProto::friend_relation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::friend_relation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ChatProto::friend_relation, _impl_.master_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::friend_relation, _impl_.follower_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::friend_relation, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::friend_relation, _impl_.chatid_),
    0,
    1,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ChatProto::group_relation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::group_relation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ChatProto::group_relation, _impl_.master_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::group_relation, _impl_.follower_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::group_relation, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::group_relation, _impl_.owner_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::group_relation, _impl_.manager_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::group_relation, _impl_.member_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::group_relation, _impl_.chatid_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::group_relation, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::group_relation, _impl_.name_),
    0,
    1,
    ~0u,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ChatProto::chatHistory_data_package, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::chatHistory_data_package, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ChatProto::chatHistory_data_package, _impl_.chatid_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::chatHistory_data_package, _impl_.recevier_id_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::chatHistory_data_package, _impl_.messages_),
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ChatProto::error_package, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::error_package, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ChatProto::error_package, _impl_.stat_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::error_package, _impl_.reason_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::ChatProto::file, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::file, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ChatProto::file, _impl_.owner_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::file, _impl_.size_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::file, _impl_.offset_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::file, _impl_.filename_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::file, _impl_.ip_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::file, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::file, _impl_.md5_),
    PROTOBUF_FIELD_OFFSET(::ChatProto::file, _impl_.act_mode_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ChatProto::process_data_package)},
        { 11, -1, -1, sizeof(::ChatProto::heartbeat_data_package)},
        { 21, 32, -1, sizeof(::ChatProto::msg_data_package)},
        { 35, -1, -1, sizeof(::ChatProto::data)},
        { 46, 60, -1, sizeof(::ChatProto::user_data_package)},
        { 66, 78, -1, sizeof(::ChatProto::friend_relation)},
        { 82, 99, -1, sizeof(::ChatProto::group_relation)},
        { 108, 119, -1, sizeof(::ChatProto::chatHistory_data_package)},
        { 122, 132, -1, sizeof(::ChatProto::error_package)},
        { 134, 150, -1, sizeof(::ChatProto::file)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ChatProto::_process_data_package_default_instance_._instance,
    &::ChatProto::_heartbeat_data_package_default_instance_._instance,
    &::ChatProto::_msg_data_package_default_instance_._instance,
    &::ChatProto::_data_default_instance_._instance,
    &::ChatProto::_user_data_package_default_instance_._instance,
    &::ChatProto::_friend_relation_default_instance_._instance,
    &::ChatProto::_group_relation_default_instance_._instance,
    &::ChatProto::_chatHistory_data_package_default_instance_._instance,
    &::ChatProto::_error_package_default_instance_._instance,
    &::ChatProto::_file_default_instance_._instance,
};
const char descriptor_table_protodef_chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nchat.proto\022\tChatProto\032\031google/protobuf"
    "/any.proto\"=\n\024process_data_package\022\n\n\002IP"
    "\030\001 \001(\t\022\014\n\004Port\030\002 \001(\t\022\013\n\003Pid\030\003 \001(\005\"\?\n\026hea"
    "rtbeat_data_package\022\022\n\nonline_num\030\001 \001(\r\022"
    "\021\n\ttimestamp\030\003 \001(\t\"e\n\020msg_data_package\022\021"
    "\n\tTimeStamp\030\001 \001(\t\022\017\n\007Message\030\002 \001(\t\022-\n\007sp"
    "eaker\030\003 \001(\0132\034.ChatProto.user_data_packag"
    "e\"\317\007\n\004data\022)\n\006action\030\001 \001(\0162\031.ChatProto.d"
    "ata.data_mode\022%\n\007details\030\002 \003(\0132\024.google."
    "protobuf.Any\022\021\n\ttimestamp\030\003 \001(\t\"\341\006\n\tdata"
    "_mode\022\017\n\013LOAD_SERVER\020\000\022\026\n\022FRIEND_LOAD_SE"
    "RVER\020\034\022\022\n\016LOAD_SERVER_OK\020\001\022\017\n\013CHAT_FRIEN"
    "D\020\002\022\022\n\016CHAT_FRIEND_OK\020\003\022\016\n\nCHAT_GROUP\020\036\022"
    "\021\n\rCHAT_GROUP_OK\020\035\022\027\n\023REQUEST_MAKE_FRIEN"
    "D\020\004\022\032\n\026REQUEST_MAKE_FRIEND_OK\020\005\022\026\n\022ANSWE"
    "R_MAKE_FRIEND\020\006\022\031\n\025ANSWER_MAKE_FRIEND_OK"
    "\020\007\022\021\n\rDELETE_FRIEND\020\010\022\024\n\020DELETE_FRIEND_O"
    "K\020\t\022\016\n\nMAKE_GROUP\020\n\022\021\n\rMAKE_GROUP_OK\020\013\022\020"
    "\n\014DELETE_GROUP\020\014\022\023\n\017DELETE_GROUP_OK\020\r\022\026\n"
    "\022REQUEST_JOIN_GROUP\020\016\022\031\n\025REQUEST_JOIN_GR"
    "OUP_OK\020\017\022\025\n\021MANAGE_JOIN_GROUP\020\020\022\030\n\024MANAG"
    "E_JOIN_GROUP_OK\020\021\022\020\n\014MANAGE_GROUP\020\022\022\023\n\017M"
    "ANAGE_GROUP_OK\020\023\022\r\n\tSEND_FILE\020\024\022\022\n\016SEND_"
    "FILE_DONE\020 \022\020\n\014SEND_FILE_OK\020\025\022\025\n\021SEND_FI"
    "LE_DONE_OK\020!\022\r\n\tRECV_FILE\020\026\022\020\n\014RECV_FILE"
    "_OK\020\027\022\021\n\rIGNORE_FRIEND\020\030\022\024\n\020IGNORE_FRIEN"
    "D_OK\020\031\022\023\n\017UNIGNORE_FRIEND\020\032\022\026\n\022UNIGNORE_"
    "FRIEND_OK\020\033\022\022\n\016FRIEND_LOG_OUT\020\037\022\017\n\013UPDAT"
    "E_DATA\020\"\022\022\n\016UPDATE_DATA_OK\020#\022\033\n\027LOAD_USE"
    "R_RELATION_DATA\020$\022\036\n\032LOAD_USER_RELATION_"
    "DATA_OK\020%\022\026\n\022GET_ONLINE_FRIENDS\020&\022\n\n\005fal"
    "se\020\347\007\022\014\n\007success\020\350\007\"\364\001\n\021user_data_packag"
    "e\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\025\n\010password\030"
    "\003 \001(\tH\000\210\001\001\022\022\n\005email\030\004 \001(\tH\001\210\001\001\022=\n\006status"
    "\030\005 \001(\0162(.ChatProto.user_data_package.LOA"
    "D_SERVERH\002\210\001\001\022\021\n\tis_active\030\006 \001(\010\"&\n\013LOAD"
    "_SERVER\022\n\n\006LOG_IN\020\000\022\013\n\007SIGN_UP\020\001B\013\n\t_pas"
    "swordB\010\n\006_emailB\t\n\007_status\"\217\001\n\017friend_re"
    "lation\022,\n\006Master\030\001 \001(\0132\034.ChatProto.user_"
    "data_package\022.\n\010follower\030\002 \001(\0132\034.ChatPro"
    "to.user_data_package\022\016\n\006status\030\003 \001(\005\022\016\n\006"
    "chatid\030\004 \001(\t\"\262\002\n\016group_relation\022,\n\006Maste"
    "r\030\001 \001(\0132\034.ChatProto.user_data_package\022.\n"
    "\010follower\030\002 \001(\0132\034.ChatProto.user_data_pa"
    "ckage\022\016\n\006status\030\003 \001(\005\022+\n\005owner\030\004 \001(\0132\034.C"
    "hatProto.user_data_package\022-\n\007manager\030\005 "
    "\003(\0132\034.ChatProto.user_data_package\022,\n\006mem"
    "ber\030\007 \003(\0132\034.ChatProto.user_data_package\022"
    "\016\n\006chatid\030\006 \001(\t\022\n\n\002id\030\010 \001(\t\022\014\n\004name\030\t \001("
    "\t\"\203\001\n\030chatHistory_data_package\022\016\n\006chatid"
    "\030\004 \001(\t\022\030\n\013recevier_id\030\010 \001(\004H\000\210\001\001\022-\n\010mess"
    "ages\030\003 \003(\0132\033.ChatProto.msg_data_packageB"
    "\016\n\014_recevier_id\"\227\004\n\rerror_package\022+\n\004sta"
    "t\030\001 \001(\0162\035.ChatProto.error_package.mode\022\023"
    "\n\006reason\030\002 \001(\tH\000\210\001\001\"\270\003\n\004mode\022\006\n\002OK\020\000\022\024\n\020"
    "LOAD_SERVER_FAIL\020\001\022\024\n\020CHAT_FRIEND_FAIL\020\002"
    "\022\034\n\030REQUEST_MAKE_FRIEND_FAIL\020\003\022\033\n\027ANSWER"
    "_MAKE_FRIEND_FAIL\020\004\022\026\n\022DELETE_FRIEND_FAI"
    "L\020\005\022\023\n\017MAKE_GROUP_FAIL\020\006\022\025\n\021DELETE_GROUP"
    "_FAIL\020\007\022\033\n\027REQUEST_JOIN_GROUP_FAIL\020\010\022\032\n\026"
    "MANAGE_JOIN_GROUP_FAIL\020\t\022\025\n\021MANAGE_GROUP"
    "_FAIL\020\n\022\022\n\016SEND_FILE_FAIL\020\013\022\022\n\016RECV_FILE"
    "_FAIL\020\014\022\026\n\022IGNORE_FRIEND_FAIL\020\r\022\030\n\024UNIGN"
    "ORE_FRIEND_FAIL\020\016\022\024\n\020UPDATE_DATA_FAIL\020\017\022"
    " \n\034LOAD_USER_RELATION_DATA_FAIL\020\020\022\033\n\027GET"
    "_ONLINE_FRIENDS_FAIL\020\021B\t\n\007_reason\"\330\001\n\004fi"
    "le\022+\n\005owner\030\t \001(\0132\034.ChatProto.user_data_"
    "package\022\014\n\004size\030\001 \001(\003\022\016\n\006offset\030\002 \001(\003\022\020\n"
    "\010fileName\030\003 \001(\t\022\n\n\002IP\030\004 \001(\t\022\014\n\004port\030\005 \001("
    "\t\022\013\n\003md5\030\006 \001(\t\022*\n\010act_mode\030\010 \001(\0162\030.ChatP"
    "roto.file.file_act\" \n\010file_act\022\010\n\004send\020\000"
    "\022\n\n\006resend\020\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_chat_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_chat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chat_2eproto = {
    false,
    false,
    2860,
    descriptor_table_protodef_chat_2eproto,
    "chat.proto",
    &descriptor_table_chat_2eproto_once,
    descriptor_table_chat_2eproto_deps,
    1,
    10,
    schemas,
    file_default_instances,
    TableStruct_chat_2eproto::offsets,
    file_level_metadata_chat_2eproto,
    file_level_enum_descriptors_chat_2eproto,
    file_level_service_descriptors_chat_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chat_2eproto_getter() {
  return &descriptor_table_chat_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chat_2eproto(&descriptor_table_chat_2eproto);
namespace ChatProto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* data_data_mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[0];
}
bool data_data_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 999:
    case 1000:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr data_data_mode data::LOAD_SERVER;
constexpr data_data_mode data::FRIEND_LOAD_SERVER;
constexpr data_data_mode data::LOAD_SERVER_OK;
constexpr data_data_mode data::CHAT_FRIEND;
constexpr data_data_mode data::CHAT_FRIEND_OK;
constexpr data_data_mode data::CHAT_GROUP;
constexpr data_data_mode data::CHAT_GROUP_OK;
constexpr data_data_mode data::REQUEST_MAKE_FRIEND;
constexpr data_data_mode data::REQUEST_MAKE_FRIEND_OK;
constexpr data_data_mode data::ANSWER_MAKE_FRIEND;
constexpr data_data_mode data::ANSWER_MAKE_FRIEND_OK;
constexpr data_data_mode data::DELETE_FRIEND;
constexpr data_data_mode data::DELETE_FRIEND_OK;
constexpr data_data_mode data::MAKE_GROUP;
constexpr data_data_mode data::MAKE_GROUP_OK;
constexpr data_data_mode data::DELETE_GROUP;
constexpr data_data_mode data::DELETE_GROUP_OK;
constexpr data_data_mode data::REQUEST_JOIN_GROUP;
constexpr data_data_mode data::REQUEST_JOIN_GROUP_OK;
constexpr data_data_mode data::MANAGE_JOIN_GROUP;
constexpr data_data_mode data::MANAGE_JOIN_GROUP_OK;
constexpr data_data_mode data::MANAGE_GROUP;
constexpr data_data_mode data::MANAGE_GROUP_OK;
constexpr data_data_mode data::SEND_FILE;
constexpr data_data_mode data::SEND_FILE_DONE;
constexpr data_data_mode data::SEND_FILE_OK;
constexpr data_data_mode data::SEND_FILE_DONE_OK;
constexpr data_data_mode data::RECV_FILE;
constexpr data_data_mode data::RECV_FILE_OK;
constexpr data_data_mode data::IGNORE_FRIEND;
constexpr data_data_mode data::IGNORE_FRIEND_OK;
constexpr data_data_mode data::UNIGNORE_FRIEND;
constexpr data_data_mode data::UNIGNORE_FRIEND_OK;
constexpr data_data_mode data::FRIEND_LOG_OUT;
constexpr data_data_mode data::UPDATE_DATA;
constexpr data_data_mode data::UPDATE_DATA_OK;
constexpr data_data_mode data::LOAD_USER_RELATION_DATA;
constexpr data_data_mode data::LOAD_USER_RELATION_DATA_OK;
constexpr data_data_mode data::GET_ONLINE_FRIENDS;
constexpr data_data_mode data::false_;
constexpr data_data_mode data::success;
constexpr data_data_mode data::data_mode_MIN;
constexpr data_data_mode data::data_mode_MAX;
constexpr int data::data_mode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* user_data_package_LOAD_SERVER_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[1];
}
bool user_data_package_LOAD_SERVER_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr user_data_package_LOAD_SERVER user_data_package::LOG_IN;
constexpr user_data_package_LOAD_SERVER user_data_package::SIGN_UP;
constexpr user_data_package_LOAD_SERVER user_data_package::LOAD_SERVER_MIN;
constexpr user_data_package_LOAD_SERVER user_data_package::LOAD_SERVER_MAX;
constexpr int user_data_package::LOAD_SERVER_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* error_package_mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[2];
}
bool error_package_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr error_package_mode error_package::OK;
constexpr error_package_mode error_package::LOAD_SERVER_FAIL;
constexpr error_package_mode error_package::CHAT_FRIEND_FAIL;
constexpr error_package_mode error_package::REQUEST_MAKE_FRIEND_FAIL;
constexpr error_package_mode error_package::ANSWER_MAKE_FRIEND_FAIL;
constexpr error_package_mode error_package::DELETE_FRIEND_FAIL;
constexpr error_package_mode error_package::MAKE_GROUP_FAIL;
constexpr error_package_mode error_package::DELETE_GROUP_FAIL;
constexpr error_package_mode error_package::REQUEST_JOIN_GROUP_FAIL;
constexpr error_package_mode error_package::MANAGE_JOIN_GROUP_FAIL;
constexpr error_package_mode error_package::MANAGE_GROUP_FAIL;
constexpr error_package_mode error_package::SEND_FILE_FAIL;
constexpr error_package_mode error_package::RECV_FILE_FAIL;
constexpr error_package_mode error_package::IGNORE_FRIEND_FAIL;
constexpr error_package_mode error_package::UNIGNORE_FRIEND_FAIL;
constexpr error_package_mode error_package::UPDATE_DATA_FAIL;
constexpr error_package_mode error_package::LOAD_USER_RELATION_DATA_FAIL;
constexpr error_package_mode error_package::GET_ONLINE_FRIENDS_FAIL;
constexpr error_package_mode error_package::mode_MIN;
constexpr error_package_mode error_package::mode_MAX;
constexpr int error_package::mode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_file_act_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[3];
}
bool file_file_act_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr file_file_act file::send;
constexpr file_file_act file::resend;
constexpr file_file_act file::file_act_MIN;
constexpr file_file_act file::file_act_MAX;
constexpr int file::file_act_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class process_data_package::_Internal {
 public:
};

process_data_package::process_data_package(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatProto.process_data_package)
}
process_data_package::process_data_package(const process_data_package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  process_data_package* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_) {}

    , decltype(_impl_.port_) {}

    , decltype(_impl_.pid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), _this->GetArenaForAllocation());
  }
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    _this->_impl_.port_.Set(from._internal_port(), _this->GetArenaForAllocation());
  }
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:ChatProto.process_data_package)
}

inline void process_data_package::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_) {}

    , decltype(_impl_.port_) {}

    , decltype(_impl_.pid_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

process_data_package::~process_data_package() {
  // @@protoc_insertion_point(destructor:ChatProto.process_data_package)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void process_data_package::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.port_.Destroy();
}

void process_data_package::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void process_data_package::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProto.process_data_package)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.port_.ClearToEmpty();
  _impl_.pid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* process_data_package::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string IP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.process_data_package.IP"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string Port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.process_data_package.Port"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 Pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* process_data_package::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProto.process_data_package)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string IP = 1;
  if (!this->_internal_ip().empty()) {
    const std::string& _s = this->_internal_ip();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.process_data_package.IP");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string Port = 2;
  if (!this->_internal_port().empty()) {
    const std::string& _s = this->_internal_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.process_data_package.Port");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 Pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProto.process_data_package)
  return target;
}

::size_t process_data_package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProto.process_data_package)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string IP = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ip());
  }

  // string Port = 2;
  if (!this->_internal_port().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port());
  }

  // int32 Pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData process_data_package::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    process_data_package::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*process_data_package::GetClassData() const { return &_class_data_; }


void process_data_package::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<process_data_package*>(&to_msg);
  auto& from = static_cast<const process_data_package&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatProto.process_data_package)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_port().empty()) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void process_data_package::CopyFrom(const process_data_package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProto.process_data_package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool process_data_package::IsInitialized() const {
  return true;
}

void process_data_package::InternalSwap(process_data_package* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, lhs_arena,
                                       &other->_impl_.ip_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_, lhs_arena,
                                       &other->_impl_.port_, rhs_arena);

  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata process_data_package::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[0]);
}
// ===================================================================

class heartbeat_data_package::_Internal {
 public:
};

heartbeat_data_package::heartbeat_data_package(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatProto.heartbeat_data_package)
}
heartbeat_data_package::heartbeat_data_package(const heartbeat_data_package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  heartbeat_data_package* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_) {}

    , decltype(_impl_.online_num_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), _this->GetArenaForAllocation());
  }
  _this->_impl_.online_num_ = from._impl_.online_num_;
  // @@protoc_insertion_point(copy_constructor:ChatProto.heartbeat_data_package)
}

inline void heartbeat_data_package::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_) {}

    , decltype(_impl_.online_num_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

heartbeat_data_package::~heartbeat_data_package() {
  // @@protoc_insertion_point(destructor:ChatProto.heartbeat_data_package)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void heartbeat_data_package::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_.Destroy();
}

void heartbeat_data_package::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void heartbeat_data_package::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProto.heartbeat_data_package)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamp_.ClearToEmpty();
  _impl_.online_num_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* heartbeat_data_package::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 online_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.online_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.heartbeat_data_package.timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* heartbeat_data_package::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProto.heartbeat_data_package)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 online_num = 1;
  if (this->_internal_online_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_online_num(), target);
  }

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.heartbeat_data_package.timestamp");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProto.heartbeat_data_package)
  return target;
}

::size_t heartbeat_data_package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProto.heartbeat_data_package)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // uint32 online_num = 1;
  if (this->_internal_online_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_online_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData heartbeat_data_package::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    heartbeat_data_package::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*heartbeat_data_package::GetClassData() const { return &_class_data_; }


void heartbeat_data_package::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<heartbeat_data_package*>(&to_msg);
  auto& from = static_cast<const heartbeat_data_package&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatProto.heartbeat_data_package)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_online_num() != 0) {
    _this->_internal_set_online_num(from._internal_online_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void heartbeat_data_package::CopyFrom(const heartbeat_data_package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProto.heartbeat_data_package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heartbeat_data_package::IsInitialized() const {
  return true;
}

void heartbeat_data_package::InternalSwap(heartbeat_data_package* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, lhs_arena,
                                       &other->_impl_.timestamp_, rhs_arena);

  swap(_impl_.online_num_, other->_impl_.online_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata heartbeat_data_package::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[1]);
}
// ===================================================================

class msg_data_package::_Internal {
 public:
  using HasBits = decltype(std::declval<msg_data_package>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(msg_data_package, _impl_._has_bits_);
  static const ::ChatProto::user_data_package& speaker(const msg_data_package* msg);
  static void set_has_speaker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ChatProto::user_data_package&
msg_data_package::_Internal::speaker(const msg_data_package* msg) {
  return *msg->_impl_.speaker_;
}
msg_data_package::msg_data_package(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatProto.msg_data_package)
}
msg_data_package::msg_data_package(const msg_data_package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  msg_data_package* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.message_) {}

    , decltype(_impl_.speaker_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.speaker_ = new ::ChatProto::user_data_package(*from._impl_.speaker_);
  }
  // @@protoc_insertion_point(copy_constructor:ChatProto.msg_data_package)
}

inline void msg_data_package::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.message_) {}

    , decltype(_impl_.speaker_){nullptr}
  };
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

msg_data_package::~msg_data_package() {
  // @@protoc_insertion_point(destructor:ChatProto.msg_data_package)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void msg_data_package::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.speaker_;
}

void msg_data_package::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void msg_data_package::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProto.msg_data_package)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamp_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.speaker_ != nullptr);
    _impl_.speaker_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_data_package::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string TimeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.msg_data_package.TimeStamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.msg_data_package.Message"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ChatProto.user_data_package speaker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_speaker(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* msg_data_package::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProto.msg_data_package)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string TimeStamp = 1;
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.msg_data_package.TimeStamp");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string Message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.msg_data_package.Message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ChatProto.user_data_package speaker = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::speaker(this),
        _Internal::speaker(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProto.msg_data_package)
  return target;
}

::size_t msg_data_package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProto.msg_data_package)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string TimeStamp = 1;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // string Message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .ChatProto.user_data_package speaker = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.speaker_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData msg_data_package::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    msg_data_package::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*msg_data_package::GetClassData() const { return &_class_data_; }


void msg_data_package::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<msg_data_package*>(&to_msg);
  auto& from = static_cast<const msg_data_package&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatProto.msg_data_package)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_speaker()->::ChatProto::user_data_package::MergeFrom(
        from._internal_speaker());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void msg_data_package::CopyFrom(const msg_data_package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProto.msg_data_package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_data_package::IsInitialized() const {
  return true;
}

void msg_data_package::InternalSwap(msg_data_package* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, lhs_arena,
                                       &other->_impl_.timestamp_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  swap(_impl_.speaker_, other->_impl_.speaker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_data_package::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[2]);
}
// ===================================================================

class data::_Internal {
 public:
};

void data::clear_details() {
  _internal_mutable_details()->Clear();
}
data::data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatProto.data)
}
data::data(const data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.details_){from._impl_.details_}
    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.action_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), _this->GetArenaForAllocation());
  }
  _this->_impl_.action_ = from._impl_.action_;
  // @@protoc_insertion_point(copy_constructor:ChatProto.data)
}

inline void data::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.details_){arena}
    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.action_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

data::~data() {
  // @@protoc_insertion_point(destructor:ChatProto.data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void data::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_details()->~RepeatedPtrField();
  _impl_.timestamp_.Destroy();
}

void data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void data::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProto.data)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_details()->Clear();
  _impl_.timestamp_.ClearToEmpty();
  _impl_.action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatProto.data.data_mode action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::ChatProto::data_data_mode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .google.protobuf.Any details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.data.timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* data::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProto.data)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatProto.data.data_mode action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_action(), target);
  }

  // repeated .google.protobuf.Any details = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.data.timestamp");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProto.data)
  return target;
}

::size_t data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProto.data)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any details = 2;
  total_size += 1UL * this->_internal_details_size();
  for (const auto& msg : this->_internal_details()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // .ChatProto.data.data_mode action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*data::GetClassData() const { return &_class_data_; }


void data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<data*>(&to_msg);
  auto& from = static_cast<const data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatProto.data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_details()->MergeFrom(from._internal_details());
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void data::CopyFrom(const data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProto.data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data::IsInitialized() const {
  return true;
}

void data::InternalSwap(data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_details()->InternalSwap(other->_internal_mutable_details());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, lhs_arena,
                                       &other->_impl_.timestamp_, rhs_arena);
  swap(_impl_.action_, other->_impl_.action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[3]);
}
// ===================================================================

class user_data_package::_Internal {
 public:
  using HasBits = decltype(std::declval<user_data_package>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(user_data_package, _impl_._has_bits_);
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

user_data_package::user_data_package(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatProto.user_data_package)
}
user_data_package::user_data_package(const user_data_package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  user_data_package* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.email_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.status_) {}

    , decltype(_impl_.is_active_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.password_.Set(from._internal_password(), _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.email_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.email_.Set(from._internal_email(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_active_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_active_));
  // @@protoc_insertion_point(copy_constructor:ChatProto.user_data_package)
}

inline void user_data_package::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.email_) {}

    , decltype(_impl_.id_) { ::int64_t{0} }

    , decltype(_impl_.status_) { 0 }

    , decltype(_impl_.is_active_) { false }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.email_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

user_data_package::~user_data_package() {
  // @@protoc_insertion_point(destructor:ChatProto.user_data_package)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void user_data_package::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.password_.Destroy();
  _impl_.email_.Destroy();
}

void user_data_package::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void user_data_package::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProto.user_data_package)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.email_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.id_ = ::int64_t{0};
  _impl_.status_ = 0;
  _impl_.is_active_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_data_package::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.user_data_package.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.user_data_package.password"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string email = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.user_data_package.email"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .ChatProto.user_data_package.LOAD_SERVER status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::ChatProto::user_data_package_LOAD_SERVER>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* user_data_package::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProto.user_data_package)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.user_data_package.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string password = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_password();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.user_data_package.password");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string email = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_email();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.user_data_package.email");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional .ChatProto.user_data_package.LOAD_SERVER status = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_status(), target);
  }

  // bool is_active = 6;
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_is_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProto.user_data_package)
  return target;
}

::size_t user_data_package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProto.user_data_package)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string password = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_password());
    }

    // optional string email = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_email());
    }

  }
  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // optional .ChatProto.user_data_package.LOAD_SERVER status = 5;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // bool is_active = 6;
  if (this->_internal_is_active() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData user_data_package::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    user_data_package::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*user_data_package::GetClassData() const { return &_class_data_; }


void user_data_package::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<user_data_package*>(&to_msg);
  auto& from = static_cast<const user_data_package&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatProto.user_data_package)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_email(from._internal_email());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (cached_has_bits & 0x00000004u) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_is_active() != 0) {
    _this->_internal_set_is_active(from._internal_is_active());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void user_data_package::CopyFrom(const user_data_package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProto.user_data_package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_data_package::IsInitialized() const {
  return true;
}

void user_data_package::InternalSwap(user_data_package* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, lhs_arena,
                                       &other->_impl_.password_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_, lhs_arena,
                                       &other->_impl_.email_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(user_data_package, _impl_.is_active_)
      + sizeof(user_data_package::_impl_.is_active_)
      - PROTOBUF_FIELD_OFFSET(user_data_package, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata user_data_package::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[4]);
}
// ===================================================================

class friend_relation::_Internal {
 public:
  using HasBits = decltype(std::declval<friend_relation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(friend_relation, _impl_._has_bits_);
  static const ::ChatProto::user_data_package& master(const friend_relation* msg);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ChatProto::user_data_package& follower(const friend_relation* msg);
  static void set_has_follower(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ChatProto::user_data_package&
friend_relation::_Internal::master(const friend_relation* msg) {
  return *msg->_impl_.master_;
}
const ::ChatProto::user_data_package&
friend_relation::_Internal::follower(const friend_relation* msg) {
  return *msg->_impl_.follower_;
}
friend_relation::friend_relation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatProto.friend_relation)
}
friend_relation::friend_relation(const friend_relation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  friend_relation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chatid_) {}

    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.follower_){nullptr}
    , decltype(_impl_.status_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chatid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chatid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chatid().empty()) {
    _this->_impl_.chatid_.Set(from._internal_chatid(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.master_ = new ::ChatProto::user_data_package(*from._impl_.master_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.follower_ = new ::ChatProto::user_data_package(*from._impl_.follower_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:ChatProto.friend_relation)
}

inline void friend_relation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chatid_) {}

    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.follower_){nullptr}
    , decltype(_impl_.status_) { 0 }

  };
  _impl_.chatid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chatid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

friend_relation::~friend_relation() {
  // @@protoc_insertion_point(destructor:ChatProto.friend_relation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void friend_relation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chatid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.master_;
  if (this != internal_default_instance()) delete _impl_.follower_;
}

void friend_relation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void friend_relation::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProto.friend_relation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chatid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.master_ != nullptr);
      _impl_.master_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.follower_ != nullptr);
      _impl_.follower_->Clear();
    }
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* friend_relation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatProto.user_data_package Master = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ChatProto.user_data_package follower = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_follower(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string chatid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chatid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.friend_relation.chatid"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* friend_relation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProto.friend_relation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ChatProto.user_data_package Master = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::master(this),
        _Internal::master(this).GetCachedSize(), target, stream);
  }

  // .ChatProto.user_data_package follower = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::follower(this),
        _Internal::follower(this).GetCachedSize(), target, stream);
  }

  // int32 status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_status(), target);
  }

  // string chatid = 4;
  if (!this->_internal_chatid().empty()) {
    const std::string& _s = this->_internal_chatid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.friend_relation.chatid");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProto.friend_relation)
  return target;
}

::size_t friend_relation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProto.friend_relation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chatid = 4;
  if (!this->_internal_chatid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_chatid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ChatProto.user_data_package Master = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.master_);
    }

    // .ChatProto.user_data_package follower = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.follower_);
    }

  }
  // int32 status = 3;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData friend_relation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    friend_relation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*friend_relation::GetClassData() const { return &_class_data_; }


void friend_relation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<friend_relation*>(&to_msg);
  auto& from = static_cast<const friend_relation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatProto.friend_relation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chatid().empty()) {
    _this->_internal_set_chatid(from._internal_chatid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_master()->::ChatProto::user_data_package::MergeFrom(
          from._internal_master());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_follower()->::ChatProto::user_data_package::MergeFrom(
          from._internal_follower());
    }
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void friend_relation::CopyFrom(const friend_relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProto.friend_relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_relation::IsInitialized() const {
  return true;
}

void friend_relation::InternalSwap(friend_relation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chatid_, lhs_arena,
                                       &other->_impl_.chatid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(friend_relation, _impl_.status_)
      + sizeof(friend_relation::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(friend_relation, _impl_.master_)>(
          reinterpret_cast<char*>(&_impl_.master_),
          reinterpret_cast<char*>(&other->_impl_.master_));
}

::PROTOBUF_NAMESPACE_ID::Metadata friend_relation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[5]);
}
// ===================================================================

class group_relation::_Internal {
 public:
  using HasBits = decltype(std::declval<group_relation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(group_relation, _impl_._has_bits_);
  static const ::ChatProto::user_data_package& master(const group_relation* msg);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ChatProto::user_data_package& follower(const group_relation* msg);
  static void set_has_follower(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ChatProto::user_data_package& owner(const group_relation* msg);
  static void set_has_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ChatProto::user_data_package&
group_relation::_Internal::master(const group_relation* msg) {
  return *msg->_impl_.master_;
}
const ::ChatProto::user_data_package&
group_relation::_Internal::follower(const group_relation* msg) {
  return *msg->_impl_.follower_;
}
const ::ChatProto::user_data_package&
group_relation::_Internal::owner(const group_relation* msg) {
  return *msg->_impl_.owner_;
}
group_relation::group_relation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatProto.group_relation)
}
group_relation::group_relation(const group_relation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  group_relation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manager_){from._impl_.manager_}
    , decltype(_impl_.member_){from._impl_.member_}
    , decltype(_impl_.chatid_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.follower_){nullptr}
    , decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.status_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chatid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chatid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chatid().empty()) {
    _this->_impl_.chatid_.Set(from._internal_chatid(), _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.master_ = new ::ChatProto::user_data_package(*from._impl_.master_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.follower_ = new ::ChatProto::user_data_package(*from._impl_.follower_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.owner_ = new ::ChatProto::user_data_package(*from._impl_.owner_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:ChatProto.group_relation)
}

inline void group_relation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.manager_){arena}
    , decltype(_impl_.member_){arena}
    , decltype(_impl_.chatid_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.master_){nullptr}
    , decltype(_impl_.follower_){nullptr}
    , decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.status_) { 0 }

  };
  _impl_.chatid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chatid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

group_relation::~group_relation() {
  // @@protoc_insertion_point(destructor:ChatProto.group_relation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void group_relation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_manager()->~RepeatedPtrField();
  _internal_mutable_member()->~RepeatedPtrField();
  _impl_.chatid_.Destroy();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.master_;
  if (this != internal_default_instance()) delete _impl_.follower_;
  if (this != internal_default_instance()) delete _impl_.owner_;
}

void group_relation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void group_relation::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProto.group_relation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_manager()->Clear();
  _internal_mutable_member()->Clear();
  _impl_.chatid_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.master_ != nullptr);
      _impl_.master_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.follower_ != nullptr);
      _impl_.follower_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.owner_ != nullptr);
      _impl_.owner_->Clear();
    }
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* group_relation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatProto.user_data_package Master = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ChatProto.user_data_package follower = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_follower(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ChatProto.user_data_package owner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ChatProto.user_data_package manager = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_manager(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string chatid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_chatid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.group_relation.chatid"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ChatProto.user_data_package member = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.group_relation.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.group_relation.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* group_relation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProto.group_relation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ChatProto.user_data_package Master = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::master(this),
        _Internal::master(this).GetCachedSize(), target, stream);
  }

  // .ChatProto.user_data_package follower = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::follower(this),
        _Internal::follower(this).GetCachedSize(), target, stream);
  }

  // int32 status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_status(), target);
  }

  // .ChatProto.user_data_package owner = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::owner(this),
        _Internal::owner(this).GetCachedSize(), target, stream);
  }

  // repeated .ChatProto.user_data_package manager = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_manager_size()); i < n; i++) {
    const auto& repfield = this->_internal_manager(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string chatid = 6;
  if (!this->_internal_chatid().empty()) {
    const std::string& _s = this->_internal_chatid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.group_relation.chatid");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // repeated .ChatProto.user_data_package member = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_member_size()); i < n; i++) {
    const auto& repfield = this->_internal_member(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string id = 8;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.group_relation.id");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string name = 9;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.group_relation.name");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProto.group_relation)
  return target;
}

::size_t group_relation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProto.group_relation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatProto.user_data_package manager = 5;
  total_size += 1UL * this->_internal_manager_size();
  for (const auto& msg : this->_internal_manager()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ChatProto.user_data_package member = 7;
  total_size += 1UL * this->_internal_member_size();
  for (const auto& msg : this->_internal_member()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string chatid = 6;
  if (!this->_internal_chatid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_chatid());
  }

  // string id = 8;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string name = 9;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .ChatProto.user_data_package Master = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.master_);
    }

    // .ChatProto.user_data_package follower = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.follower_);
    }

    // .ChatProto.user_data_package owner = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.owner_);
    }

  }
  // int32 status = 3;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData group_relation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    group_relation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*group_relation::GetClassData() const { return &_class_data_; }


void group_relation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<group_relation*>(&to_msg);
  auto& from = static_cast<const group_relation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatProto.group_relation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_manager()->MergeFrom(from._internal_manager());
  _this->_internal_mutable_member()->MergeFrom(from._internal_member());
  if (!from._internal_chatid().empty()) {
    _this->_internal_set_chatid(from._internal_chatid());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_master()->::ChatProto::user_data_package::MergeFrom(
          from._internal_master());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_follower()->::ChatProto::user_data_package::MergeFrom(
          from._internal_follower());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_owner()->::ChatProto::user_data_package::MergeFrom(
          from._internal_owner());
    }
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void group_relation::CopyFrom(const group_relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProto.group_relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool group_relation::IsInitialized() const {
  return true;
}

void group_relation::InternalSwap(group_relation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_manager()->InternalSwap(other->_internal_mutable_manager());
  _internal_mutable_member()->InternalSwap(other->_internal_mutable_member());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chatid_, lhs_arena,
                                       &other->_impl_.chatid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(group_relation, _impl_.status_)
      + sizeof(group_relation::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(group_relation, _impl_.master_)>(
          reinterpret_cast<char*>(&_impl_.master_),
          reinterpret_cast<char*>(&other->_impl_.master_));
}

::PROTOBUF_NAMESPACE_ID::Metadata group_relation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[6]);
}
// ===================================================================

class chatHistory_data_package::_Internal {
 public:
  using HasBits = decltype(std::declval<chatHistory_data_package>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(chatHistory_data_package, _impl_._has_bits_);
  static void set_has_recevier_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

chatHistory_data_package::chatHistory_data_package(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatProto.chatHistory_data_package)
}
chatHistory_data_package::chatHistory_data_package(const chatHistory_data_package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  chatHistory_data_package* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.chatid_) {}

    , decltype(_impl_.recevier_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chatid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chatid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chatid().empty()) {
    _this->_impl_.chatid_.Set(from._internal_chatid(), _this->GetArenaForAllocation());
  }
  _this->_impl_.recevier_id_ = from._impl_.recevier_id_;
  // @@protoc_insertion_point(copy_constructor:ChatProto.chatHistory_data_package)
}

inline void chatHistory_data_package::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messages_){arena}
    , decltype(_impl_.chatid_) {}

    , decltype(_impl_.recevier_id_) { ::uint64_t{0u} }

  };
  _impl_.chatid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chatid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

chatHistory_data_package::~chatHistory_data_package() {
  // @@protoc_insertion_point(destructor:ChatProto.chatHistory_data_package)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void chatHistory_data_package::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_messages()->~RepeatedPtrField();
  _impl_.chatid_.Destroy();
}

void chatHistory_data_package::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void chatHistory_data_package::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProto.chatHistory_data_package)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_messages()->Clear();
  _impl_.chatid_.ClearToEmpty();
  _impl_.recevier_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* chatHistory_data_package::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ChatProto.msg_data_package messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string chatid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chatid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.chatHistory_data_package.chatid"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 recevier_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_recevier_id(&has_bits);
          _impl_.recevier_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* chatHistory_data_package::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProto.chatHistory_data_package)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChatProto.msg_data_package messages = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string chatid = 4;
  if (!this->_internal_chatid().empty()) {
    const std::string& _s = this->_internal_chatid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.chatHistory_data_package.chatid");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 recevier_id = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_recevier_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProto.chatHistory_data_package)
  return target;
}

::size_t chatHistory_data_package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProto.chatHistory_data_package)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatProto.msg_data_package messages = 3;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_internal_messages()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string chatid = 4;
  if (!this->_internal_chatid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_chatid());
  }

  // optional uint64 recevier_id = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_recevier_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData chatHistory_data_package::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    chatHistory_data_package::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*chatHistory_data_package::GetClassData() const { return &_class_data_; }


void chatHistory_data_package::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<chatHistory_data_package*>(&to_msg);
  auto& from = static_cast<const chatHistory_data_package&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatProto.chatHistory_data_package)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_messages()->MergeFrom(from._internal_messages());
  if (!from._internal_chatid().empty()) {
    _this->_internal_set_chatid(from._internal_chatid());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_recevier_id(from._internal_recevier_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void chatHistory_data_package::CopyFrom(const chatHistory_data_package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProto.chatHistory_data_package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatHistory_data_package::IsInitialized() const {
  return true;
}

void chatHistory_data_package::InternalSwap(chatHistory_data_package* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_messages()->InternalSwap(other->_internal_mutable_messages());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chatid_, lhs_arena,
                                       &other->_impl_.chatid_, rhs_arena);

  swap(_impl_.recevier_id_, other->_impl_.recevier_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata chatHistory_data_package::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[7]);
}
// ===================================================================

class error_package::_Internal {
 public:
  using HasBits = decltype(std::declval<error_package>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(error_package, _impl_._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

error_package::error_package(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatProto.error_package)
}
error_package::error_package(const error_package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  error_package* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_) {}

    , decltype(_impl_.stat_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.reason_.Set(from._internal_reason(), _this->GetArenaForAllocation());
  }
  _this->_impl_.stat_ = from._impl_.stat_;
  // @@protoc_insertion_point(copy_constructor:ChatProto.error_package)
}

inline void error_package::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_) {}

    , decltype(_impl_.stat_) { 0 }

  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

error_package::~error_package() {
  // @@protoc_insertion_point(destructor:ChatProto.error_package)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void error_package::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
}

void error_package::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void error_package::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProto.error_package)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.reason_.ClearNonDefaultToEmpty();
  }
  _impl_.stat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* error_package::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatProto.error_package.mode stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_stat(static_cast<::ChatProto::error_package_mode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.error_package.reason"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* error_package::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProto.error_package)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatProto.error_package.mode stat = 1;
  if (this->_internal_stat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_stat(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_reason();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.error_package.reason");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProto.error_package)
  return target;
}

::size_t error_package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProto.error_package)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string reason = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_reason());
  }

  // .ChatProto.error_package.mode stat = 1;
  if (this->_internal_stat() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_stat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData error_package::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    error_package::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*error_package::GetClassData() const { return &_class_data_; }


void error_package::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<error_package*>(&to_msg);
  auto& from = static_cast<const error_package&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatProto.error_package)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_stat() != 0) {
    _this->_internal_set_stat(from._internal_stat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void error_package::CopyFrom(const error_package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProto.error_package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool error_package::IsInitialized() const {
  return true;
}

void error_package::InternalSwap(error_package* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, lhs_arena,
                                       &other->_impl_.reason_, rhs_arena);
  swap(_impl_.stat_, other->_impl_.stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata error_package::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[8]);
}
// ===================================================================

class file::_Internal {
 public:
  using HasBits = decltype(std::declval<file>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(file, _impl_._has_bits_);
  static const ::ChatProto::user_data_package& owner(const file* msg);
  static void set_has_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ChatProto::user_data_package&
file::_Internal::owner(const file* msg) {
  return *msg->_impl_.owner_;
}
file::file(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatProto.file)
}
file::file(const file& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  file* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_) {}

    , decltype(_impl_.ip_) {}

    , decltype(_impl_.port_) {}

    , decltype(_impl_.md5_) {}

    , decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.size_) {}

    , decltype(_impl_.offset_) {}

    , decltype(_impl_.act_mode_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), _this->GetArenaForAllocation());
  }
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    _this->_impl_.port_.Set(from._internal_port(), _this->GetArenaForAllocation());
  }
  _impl_.md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.md5_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_md5().empty()) {
    _this->_impl_.md5_.Set(from._internal_md5(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.owner_ = new ::ChatProto::user_data_package(*from._impl_.owner_);
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.act_mode_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.act_mode_));
  // @@protoc_insertion_point(copy_constructor:ChatProto.file)
}

inline void file::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_) {}

    , decltype(_impl_.ip_) {}

    , decltype(_impl_.port_) {}

    , decltype(_impl_.md5_) {}

    , decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.size_) { ::int64_t{0} }

    , decltype(_impl_.offset_) { ::int64_t{0} }

    , decltype(_impl_.act_mode_) { 0 }

  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.md5_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

file::~file() {
  // @@protoc_insertion_point(destructor:ChatProto.file)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void file::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  _impl_.ip_.Destroy();
  _impl_.port_.Destroy();
  _impl_.md5_.Destroy();
  if (this != internal_default_instance()) delete _impl_.owner_;
}

void file::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void file::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProto.file)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.port_.ClearToEmpty();
  _impl_.md5_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.owner_ != nullptr);
    _impl_.owner_->Clear();
  }
  ::memset(&_impl_.size_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.act_mode_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.act_mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* file::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string fileName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.file.fileName"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string IP = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.file.IP"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.file.port"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string md5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChatProto.file.md5"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ChatProto.file.file_act act_mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_act_mode(static_cast<::ChatProto::file_file_act>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ChatProto.user_data_package owner = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* file::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProto.file)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_size(), target);
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_offset(), target);
  }

  // string fileName = 3;
  if (!this->_internal_filename().empty()) {
    const std::string& _s = this->_internal_filename();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.file.fileName");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string IP = 4;
  if (!this->_internal_ip().empty()) {
    const std::string& _s = this->_internal_ip();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.file.IP");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string port = 5;
  if (!this->_internal_port().empty()) {
    const std::string& _s = this->_internal_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.file.port");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string md5 = 6;
  if (!this->_internal_md5().empty()) {
    const std::string& _s = this->_internal_md5();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ChatProto.file.md5");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .ChatProto.file.file_act act_mode = 8;
  if (this->_internal_act_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_act_mode(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ChatProto.user_data_package owner = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::owner(this),
        _Internal::owner(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProto.file)
  return target;
}

::size_t file::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProto.file)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fileName = 3;
  if (!this->_internal_filename().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_filename());
  }

  // string IP = 4;
  if (!this->_internal_ip().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ip());
  }

  // string port = 5;
  if (!this->_internal_port().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port());
  }

  // string md5 = 6;
  if (!this->_internal_md5().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_md5());
  }

  // .ChatProto.user_data_package owner = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_);
  }

  // int64 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_size());
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_offset());
  }

  // .ChatProto.file.file_act act_mode = 8;
  if (this->_internal_act_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_act_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData file::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    file::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*file::GetClassData() const { return &_class_data_; }


void file::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<file*>(&to_msg);
  auto& from = static_cast<const file&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatProto.file)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_port().empty()) {
    _this->_internal_set_port(from._internal_port());
  }
  if (!from._internal_md5().empty()) {
    _this->_internal_set_md5(from._internal_md5());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_owner()->::ChatProto::user_data_package::MergeFrom(
        from._internal_owner());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_act_mode() != 0) {
    _this->_internal_set_act_mode(from._internal_act_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void file::CopyFrom(const file& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProto.file)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool file::IsInitialized() const {
  return true;
}

void file::InternalSwap(file* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filename_, lhs_arena,
                                       &other->_impl_.filename_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, lhs_arena,
                                       &other->_impl_.ip_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_, lhs_arena,
                                       &other->_impl_.port_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.md5_, lhs_arena,
                                       &other->_impl_.md5_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(file, _impl_.act_mode_)
      + sizeof(file::_impl_.act_mode_)
      - PROTOBUF_FIELD_OFFSET(file, _impl_.owner_)>(
          reinterpret_cast<char*>(&_impl_.owner_),
          reinterpret_cast<char*>(&other->_impl_.owner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata file::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace ChatProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChatProto::process_data_package*
Arena::CreateMaybeMessage< ::ChatProto::process_data_package >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatProto::process_data_package >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatProto::heartbeat_data_package*
Arena::CreateMaybeMessage< ::ChatProto::heartbeat_data_package >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatProto::heartbeat_data_package >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatProto::msg_data_package*
Arena::CreateMaybeMessage< ::ChatProto::msg_data_package >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatProto::msg_data_package >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatProto::data*
Arena::CreateMaybeMessage< ::ChatProto::data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatProto::data >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatProto::user_data_package*
Arena::CreateMaybeMessage< ::ChatProto::user_data_package >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatProto::user_data_package >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatProto::friend_relation*
Arena::CreateMaybeMessage< ::ChatProto::friend_relation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatProto::friend_relation >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatProto::group_relation*
Arena::CreateMaybeMessage< ::ChatProto::group_relation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatProto::group_relation >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatProto::chatHistory_data_package*
Arena::CreateMaybeMessage< ::ChatProto::chatHistory_data_package >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatProto::chatHistory_data_package >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatProto::error_package*
Arena::CreateMaybeMessage< ::ChatProto::error_package >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatProto::error_package >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatProto::file*
Arena::CreateMaybeMessage< ::ChatProto::file >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatProto::file >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
